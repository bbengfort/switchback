// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwitchbackClient is the client API for Switchback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchbackClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Switchback_PublishClient, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Switchback_SubscribeClient, error)
	Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServiceState, error)
}

type switchbackClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchbackClient(cc grpc.ClientConnInterface) SwitchbackClient {
	return &switchbackClient{cc}
}

func (c *switchbackClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Switchback_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Switchback_ServiceDesc.Streams[0], "/switchback.v1.Switchback/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchbackPublishClient{stream}
	return x, nil
}

type Switchback_PublishClient interface {
	Send(*Event) error
	CloseAndRecv() (*ClosePublish, error)
	grpc.ClientStream
}

type switchbackPublishClient struct {
	grpc.ClientStream
}

func (x *switchbackPublishClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *switchbackPublishClient) CloseAndRecv() (*ClosePublish, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClosePublish)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchbackClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Switchback_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Switchback_ServiceDesc.Streams[1], "/switchback.v1.Switchback/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchbackSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switchback_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type switchbackSubscribeClient struct {
	grpc.ClientStream
}

func (x *switchbackSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchbackClient) Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServiceState, error) {
	out := new(ServiceState)
	err := c.cc.Invoke(ctx, "/switchback.v1.Switchback/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchbackServer is the server API for Switchback service.
// All implementations must embed UnimplementedSwitchbackServer
// for forward compatibility
type SwitchbackServer interface {
	Publish(Switchback_PublishServer) error
	Subscribe(*Subscription, Switchback_SubscribeServer) error
	Status(context.Context, *HealthCheck) (*ServiceState, error)
	mustEmbedUnimplementedSwitchbackServer()
}

// UnimplementedSwitchbackServer must be embedded to have forward compatible implementations.
type UnimplementedSwitchbackServer struct {
}

func (UnimplementedSwitchbackServer) Publish(Switchback_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedSwitchbackServer) Subscribe(*Subscription, Switchback_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSwitchbackServer) Status(context.Context, *HealthCheck) (*ServiceState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSwitchbackServer) mustEmbedUnimplementedSwitchbackServer() {}

// UnsafeSwitchbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchbackServer will
// result in compilation errors.
type UnsafeSwitchbackServer interface {
	mustEmbedUnimplementedSwitchbackServer()
}

func RegisterSwitchbackServer(s grpc.ServiceRegistrar, srv SwitchbackServer) {
	s.RegisterService(&Switchback_ServiceDesc, srv)
}

func _Switchback_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SwitchbackServer).Publish(&switchbackPublishServer{stream})
}

type Switchback_PublishServer interface {
	SendAndClose(*ClosePublish) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type switchbackPublishServer struct {
	grpc.ServerStream
}

func (x *switchbackPublishServer) SendAndClose(m *ClosePublish) error {
	return x.ServerStream.SendMsg(m)
}

func (x *switchbackPublishServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Switchback_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchbackServer).Subscribe(m, &switchbackSubscribeServer{stream})
}

type Switchback_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type switchbackSubscribeServer struct {
	grpc.ServerStream
}

func (x *switchbackSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Switchback_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchbackServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switchback.v1.Switchback/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchbackServer).Status(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Switchback_ServiceDesc is the grpc.ServiceDesc for Switchback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Switchback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "switchback.v1.Switchback",
	HandlerType: (*SwitchbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Switchback_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Switchback_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Switchback_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "switchback/v1/switchback.proto",
}
